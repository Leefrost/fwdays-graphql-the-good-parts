"""
Delegates a resolver to a remote schema.
"""
directive @delegate(
  """
  The path to the field on the remote schema.
  """
  path: String

  """
  The name of the schema to which this field shall be delegated to.
  """
  schema: String!
) on FIELD_DEFINITION

"""
Annotates the original name of a type.
"""
directive @source(
  """
  The original name of the annotated type.
  """
  name: String!

  """
  The name of the schema to which this type belongs to.
  """
  schema: String!
) repeatable on OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

type Query {
  tracks(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): TracksConnection
  speakers(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): SpeakersConnection
  participants(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ParticipantsConnection
}

type Mutation {
  createTrack(input: TrackInput!): CreateTrackPayload!
  assignParticipant(
    trackId: Int!
    participantInput: TrackParticipantInput!
  ): AssignParticipantPayload!
  registerSpeaker(input: SpeakerInput!): SpeakerRegistrationPayload!
  registerParticipant(
    input: ParticipantRegistrationInput!
  ): ParticipantRegistrationPayload!
  changeRegisterEmail(
    participantId: Int!
    email: String!
  ): ParticipantRegistrationPayload!
}

type AssignParticipantPayload {
  trackId: Int!
  participant: String!
}

type CreateTrackPayload {
  trackId: Int!
  topic: String!
  speaker: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Track {
  id: Int!
  topic: String
  speaker: TrackSpeaker!
  participants: [TrackParticipant!]!
}

type TrackParticipant {
  id: Int!
  firstName: String!
  lastName: String!
}

type TrackSpeaker {
  id: Int!
  firstName: String!
  lastName: String!
}

"""
A connection to a list of items.
"""
type TracksConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TracksEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Track!]
}

"""
An edge in a connection.
"""
type TracksEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Track!
}

input TrackInput {
  topic: String!
  speaker: TrackSpeakerInput!
}

input TrackParticipantInput {
  firstName: String!
  lastName: String!
}

input TrackSpeakerInput {
  firstName: String!
  lastName: String!
}

type Speaker {
  id: Int!
  firstName: String!
  lastName: String!
  company: String!
  position: String!
  bio: String
  topic: String!
}

type SpeakerRegistrationPayload {
  id: Int!
  firstName: String!
  lastName: String!
  topic: String!
}

"""
A connection to a list of items.
"""
type SpeakersConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SpeakersEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Speaker!]
}

"""
An edge in a connection.
"""
type SpeakersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Speaker!
}

input SpeakerInput {
  firstName: String!
  lastName: String!
  company: String!
  position: String!
  bio: String!
  topic: String!
}

type Participant {
  id: Int!
  firstName: String
  lastName: String
  userName: String
  emailAddress: String
}

type ParticipantRegistrationPayload {
  id: Int!
  firstName: String!
  lastName: String!
}

"""
A connection to a list of items.
"""
type ParticipantsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ParticipantsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Participant!]
}

"""
An edge in a connection.
"""
type ParticipantsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Participant!
}

input ParticipantRegistrationInput {
  firstName: String!
  lastName: String!
  nickname: String!
  email: String!
}
