schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  registerSpeaker(input: SpeakerInput!): SpeakerRegistrationPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  speakers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): SpeakersConnection
}

type Speaker {
  id: Int!
  firstName: String!
  lastName: String!
  company: String!
  position: String!
  bio: String
  topic: String!
  github: String
}

type SpeakerRegistrationPayload {
  id: Int!
  firstName: String!
  lastName: String!
  topic: String!
}

"A connection to a list of items."
type SpeakersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SpeakersEdge!]
  "A flattened list of the nodes."
  nodes: [Speaker!]
}

"An edge in a connection."
type SpeakersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Speaker!
}

input SpeakerInput {
  firstName: String!
  lastName: String!
  company: String!
  position: String!
  bio: String!
  topic: String!
  github: String
}
